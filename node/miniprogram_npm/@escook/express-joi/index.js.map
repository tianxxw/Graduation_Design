{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const Joi = require('joi')\n\nconst expressJoi = function (schemas, options = { strict: false }) {\n  // 自定义校验选项\n  // strict 自定义属性，默认不开启严格模式，会过滤掉那些未定义的参数项\n  //        如果用户指定了 strict 的值为 true，则开启严格模式，此时不会过滤掉那些未定义的参数项\n  if (!options.strict) {\n    // allowUnknown 允许提交未定义的参数项\n    // stripUnknown 过滤掉那些未定义的参数项\n    options = { allowUnknown: true, stripUnknown: true, ...options }\n  }\n\n  // 从 options 配置对象中，删除自定义的 strict 属性\n  delete options.strict\n\n  // TODO: 用户指定了什么 schema，就应该校验什么样的数据\n  return function (req, res, next) {\n    ;['body', 'query', 'params'].forEach(key => {\n      // 如果当前循环的这一项 schema 没有提供，则不执行对应的校验\n      if (!schemas[key]) return\n\n      // 执行校验\n      const schema = Joi.object(schemas[key])\n      const { error, value } = schema.validate(req[key], options)\n\n      if (error) {\n        // 校验失败\n        throw error\n      } else {\n        // 校验成功，把校验的结果重新赋值到 req 对应的 key 上\n        req[key] = value\n      }\n    })\n\n    // 校验通过\n    next()\n  }\n}\n\nmodule.exports = expressJoi\n"]}