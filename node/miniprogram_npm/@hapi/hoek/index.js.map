{"version":3,"sources":["index.js","applyToDefaults.js","assert.js","error.js","stringify.js","clone.js","reach.js","types.js","utils.js","merge.js","bench.js","block.js","ignore.js","contain.js","deepEqual.js","escapeRegex.js","escapeHeaderAttribute.js","escapeHtml.js","escapeJson.js","flatten.js","intersect.js","isPromise.js","once.js","reachTemplate.js","wait.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA,AIZA;AHUA,ACHA,ACHA,AHSA,AIZA;AHUA,ACHA,ACHA,AHSA,AIZA;AHUA,ACHA,AGTA,AFMA,AHSA,AIZA;AHUA,ACHA,AGTA,AFMA,AHSA,AIZA;AHUA,ACHA,AGTA,AFMA,AHSA,AIZA;AHUA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA;AHUA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA;AHUA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA;AHUA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA;ANmBA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA;ANmBA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA;ANmBA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA,ACHA;APsBA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA,ACHA;APsBA,ACHA,AGTA,AFMA,AHSA,AMlBA,AFMA,AGTA,ACHA;APsBA,ACHA,AGTA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,ACHA,AGTA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AIZA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AS3BA,ALeA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AS3BA,ALeA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AS3BA,ALeA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AS3BA,ACHA,ANkBA,AFMA,AHSA,AS3BA,AHSA,ACHA,ACHA;APsBA,AS3BA,ACHA,ANkBA,AFMA,AHSA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AFMA,AHSA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AOrBA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AOrBA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AOrBA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ADGA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ADGA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ADGA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ACHA,AFMA,AZoCA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ACHA,Ad0CA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ACHA,Ad0CA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ACHA,ANkBA,AQxBA,ACHA,ACHA,Af6CA,AS3BA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,ACHA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,ACHA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ADGA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ADGA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ADGA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,AFMA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,AFMA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,AFMA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,AHSA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,AHSA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,AHSA,ANkBA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,AV8BA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,AV8BA,AHSA,ACHA;ANmBA,AS3BA,ALeA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,AV8BA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AZoCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AZoCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AHSA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,ACHA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,AiBnDA,AhBgDA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,AiBnDA,AhBgDA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,AiBnDA,AhBgDA;ANmBA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AZoCA,AavCA,AhBgDA,AiBnDA,AhBgDA,AiBnDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,AXiCA,AavCA,AhBgDA,AiBnDA,AhBgDA,AiBnDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,AXiCA,AavCA,AhBgDA,AiBnDA,AhBgDA,AiBnDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,AXiCA,AavCA,AhBgDA,AiBnDA,AhBgDA,AiBnDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,AXiCA,AavCA,AhBgDA,AiBnDA,AhBgDA,AiBnDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,ACHA,ACHA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,AENA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,AENA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,AENA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,AENA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ACHA,AENA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AiBnDA,ACHA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AavCA,AhBgDA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AHSA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AHSA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,AHSA,AkBtDA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,AGTA,AXiCA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ARwBA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ARwBA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ARwBA,Ae7CA;AvBsEA,AIZA,AQxBA,ACHA,AGTA,ARwBA,Ae7CA;AnB0DA,AQxBA,ACHA,AGTA,AOrBA;AnB0DA,AQxBA,ACHA,AGTA,AOrBA;AnB0DA,AQxBA,ACHA,AGTA,AOrBA;AnB0DA,AQxBA,ACHA,AGTA,AOrBA;AnB0DA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA,AGTA;AZqCA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxBA,ACHA;AT4BA,AQxfile":"index.js","sourcesContent":["\n\nexports.applyToDefaults = require('./applyToDefaults');\n\nexports.assert = require('./assert');\n\nexports.Bench = require('./bench');\n\nexports.block = require('./block');\n\nexports.clone = require('./clone');\n\nexports.contain = require('./contain');\n\nexports.deepEqual = require('./deepEqual');\n\nexports.Error = require('./error');\n\nexports.escapeHeaderAttribute = require('./escapeHeaderAttribute');\n\nexports.escapeHtml = require('./escapeHtml');\n\nexports.escapeJson = require('./escapeJson');\n\nexports.escapeRegex = require('./escapeRegex');\n\nexports.flatten = require('./flatten');\n\nexports.ignore = require('./ignore');\n\nexports.intersect = require('./intersect');\n\nexports.isPromise = require('./isPromise');\n\nexports.merge = require('./merge');\n\nexports.once = require('./once');\n\nexports.reach = require('./reach');\n\nexports.reachTemplate = require('./reachTemplate');\n\nexports.stringify = require('./stringify');\n\nexports.wait = require('./wait');\n","\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Merge = require('./merge');\nconst Reach = require('./reach');\n\n\nconst internals = {};\n\n\nmodule.exports = function (defaults, source, options = {}) {\n\n    Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n    Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n    Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n    if (!source) {                                                  // If no source, return null\n        return null;\n    }\n\n    if (options.shallow) {\n        return internals.applyToDefaultsWithShallow(defaults, source, options);\n    }\n\n    const copy = Clone(defaults);\n\n    if (source === true) {                                          // If source is set to true, use defaults\n        return copy;\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n\n    const keys = options.shallow;\n    Assert(Array.isArray(keys), 'Invalid keys');\n\n    const seen = new Map();\n    const merge = source === true ? null : new Set();\n\n    for (let key of keys) {\n        key = Array.isArray(key) ? key : key.split('.');            // Pre-split optimization\n\n        const ref = Reach(defaults, key);\n        if (ref &&\n            typeof ref === 'object') {\n\n            seen.set(ref, merge && Reach(source, key) || ref);\n        }\n        else if (merge) {\n            merge.add(key);\n        }\n    }\n\n    const copy = Clone(defaults, {}, seen);\n\n    if (!merge) {\n        return copy;\n    }\n\n    for (const key of merge) {\n        internals.reachCopy(copy, source, key);\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.reachCopy = function (dst, src, path) {\n\n    for (const segment of path) {\n        if (!(segment in src)) {\n            return;\n        }\n\n        const val = src[segment];\n\n        if (typeof val !== 'object' || val === null) {\n            return;\n        }\n\n        src = val;\n    }\n\n    const value = src;\n    let ref = dst;\n    for (let i = 0; i < path.length - 1; ++i) {\n        const segment = path[i];\n        if (typeof ref[segment] !== 'object') {\n            ref[segment] = {};\n        }\n\n        ref = ref[segment];\n    }\n\n    ref[path[path.length - 1]] = value;\n};\n","\n\nconst AssertError = require('./error');\n\n\nconst internals = {};\n\n\nmodule.exports = function (condition, ...args) {\n\n    if (condition) {\n        return;\n    }\n\n    if (args.length === 1 &&\n        args[0] instanceof Error) {\n\n        throw args[0];\n    }\n\n    throw new AssertError(args);\n};\n","\n\nconst Stringify = require('./stringify');\n\n\nconst internals = {};\n\n\nmodule.exports = class extends Error {\n\n    constructor(args) {\n\n        const msgs = args\n            .filter((arg) => arg !== '')\n            .map((arg) => {\n\n                return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : Stringify(arg);\n            });\n\n        super(msgs.join(' ') || 'Unknown error');\n\n        if (typeof Error.captureStackTrace === 'function') {            // $lab:coverage:ignore$\n            Error.captureStackTrace(this, exports.assert);\n        }\n    }\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function (...args) {\n\n    try {\n        return JSON.stringify(...args);\n    }\n    catch (err) {\n        return '[Cannot display object: ' + err.message + ']';\n    }\n};\n","\n\nconst Reach = require('./reach');\nconst Types = require('./types');\nconst Utils = require('./utils');\n\n\nconst internals = {\n    needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])\n};\n\n\nmodule.exports = internals.clone = function (obj, options = {}, _seen = null) {\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return obj;\n    }\n\n    let clone = internals.clone;\n    let seen = _seen;\n\n    if (options.shallow) {\n        if (options.shallow !== true) {\n            return internals.cloneWithShallow(obj, options);\n        }\n\n        clone = (value) => value;\n    }\n    else if (seen) {\n        const lookup = seen.get(obj);\n        if (lookup) {\n            return lookup;\n        }\n    }\n    else {\n        seen = new Map();\n    }\n\n    // Built-in object types\n\n    const baseProto = Types.getInternalProto(obj);\n    if (baseProto === Types.buffer) {\n        return Buffer && Buffer.from(obj);              // $lab:coverage:ignore$\n    }\n\n    if (baseProto === Types.date) {\n        return new Date(obj.getTime());\n    }\n\n    if (baseProto === Types.regex) {\n        return new RegExp(obj);\n    }\n\n    // Generic objects\n\n    const newObj = internals.base(obj, baseProto, options);\n    if (newObj === obj) {\n        return obj;\n    }\n\n    if (seen) {\n        seen.set(obj, newObj);                              // Set seen, since obj could recurse\n    }\n\n    if (baseProto === Types.set) {\n        for (const value of obj) {\n            newObj.add(clone(value, options, seen));\n        }\n    }\n    else if (baseProto === Types.map) {\n        for (const [key, value] of obj) {\n            newObj.set(key, clone(value, options, seen));\n        }\n    }\n\n    const keys = Utils.keys(obj, options);\n    for (const key of keys) {\n        if (key === '__proto__') {\n            continue;\n        }\n\n        if (baseProto === Types.array &&\n            key === 'length') {\n\n            newObj.length = obj.length;\n            continue;\n        }\n\n        const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n        if (descriptor) {\n            if (descriptor.get ||\n                descriptor.set) {\n\n                Object.defineProperty(newObj, key, descriptor);\n            }\n            else if (descriptor.enumerable) {\n                newObj[key] = clone(obj[key], options, seen);\n            }\n            else {\n                Object.defineProperty(newObj, key, { enumerable: false, writable: true, configurable: true, value: clone(obj[key], options, seen) });\n            }\n        }\n        else {\n            Object.defineProperty(newObj, key, {\n                enumerable: true,\n                writable: true,\n                configurable: true,\n                value: clone(obj[key], options, seen)\n            });\n        }\n    }\n\n    return newObj;\n};\n\n\ninternals.cloneWithShallow = function (source, options) {\n\n    const keys = options.shallow;\n    options = Object.assign({}, options);\n    options.shallow = false;\n\n    const seen = new Map();\n\n    for (const key of keys) {\n        const ref = Reach(source, key);\n        if (typeof ref === 'object' ||\n            typeof ref === 'function') {\n\n            seen.set(ref, ref);\n        }\n    }\n\n    return internals.clone(source, options, seen);\n};\n\n\ninternals.base = function (obj, baseProto, options) {\n\n    if (options.prototype === false) {                  // Defaults to true\n        if (internals.needsProtoHack.has(baseProto)) {\n            return new baseProto.constructor();\n        }\n\n        return baseProto === Types.array ? [] : {};\n    }\n\n    const proto = Object.getPrototypeOf(obj);\n    if (proto &&\n        proto.isImmutable) {\n\n        return obj;\n    }\n\n    if (baseProto === Types.array) {\n        const newObj = [];\n        if (proto !== baseProto) {\n            Object.setPrototypeOf(newObj, proto);\n        }\n\n        return newObj;\n    }\n\n    if (internals.needsProtoHack.has(baseProto)) {\n        const newObj = new proto.constructor();\n        if (proto !== baseProto) {\n            Object.setPrototypeOf(newObj, proto);\n        }\n\n        return newObj;\n    }\n\n    return Object.create(proto);\n};\n","\n\nconst Assert = require('./assert');\n\n\nconst internals = {};\n\n\nmodule.exports = function (obj, chain, options) {\n\n    if (chain === false ||\n        chain === null ||\n        chain === undefined) {\n\n        return obj;\n    }\n\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { separator: options };\n    }\n\n    const isChainArray = Array.isArray(chain);\n\n    Assert(!isChainArray || !options.separator, 'Separator option is not valid for array-based chain');\n\n    const path = isChainArray ? chain : chain.split(options.separator || '.');\n    let ref = obj;\n    for (let i = 0; i < path.length; ++i) {\n        let key = path[i];\n        const type = options.iterables && internals.iterables(ref);\n\n        if (Array.isArray(ref) ||\n            type === 'set') {\n\n            const number = Number(key);\n            if (Number.isInteger(number)) {\n                key = number < 0 ? ref.length + number : number;\n            }\n        }\n\n        if (!ref ||\n            typeof ref === 'function' && options.functions === false ||         // Defaults to true\n            !type && ref[key] === undefined) {\n\n            Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);\n            Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);\n            ref = options.default;\n            break;\n        }\n\n        if (!type) {\n            ref = ref[key];\n        }\n        else if (type === 'set') {\n            ref = [...ref][key];\n        }\n        else {  // type === 'map'\n            ref = ref.get(key);\n        }\n    }\n\n    return ref;\n};\n\n\ninternals.iterables = function (ref) {\n\n    if (ref instanceof Set) {\n        return 'set';\n    }\n\n    if (ref instanceof Map) {\n        return 'map';\n    }\n};\n","\n\nconst internals = {};\n\n\nexports = module.exports = {\n    array: Array.prototype,\n    buffer: Buffer && Buffer.prototype,             // $lab:coverage:ignore$\n    date: Date.prototype,\n    error: Error.prototype,\n    generic: Object.prototype,\n    map: Map.prototype,\n    promise: Promise.prototype,\n    regex: RegExp.prototype,\n    set: Set.prototype,\n    weakMap: WeakMap.prototype,\n    weakSet: WeakSet.prototype\n};\n\n\ninternals.typeMap = new Map([\n    ['[object Error]', exports.error],\n    ['[object Map]', exports.map],\n    ['[object Promise]', exports.promise],\n    ['[object Set]', exports.set],\n    ['[object WeakMap]', exports.weakMap],\n    ['[object WeakSet]', exports.weakSet]\n]);\n\n\nexports.getInternalProto = function (obj) {\n\n    if (Array.isArray(obj)) {\n        return exports.array;\n    }\n\n    if (Buffer && obj instanceof Buffer) {          // $lab:coverage:ignore$\n        return exports.buffer;\n    }\n\n    if (obj instanceof Date) {\n        return exports.date;\n    }\n\n    if (obj instanceof RegExp) {\n        return exports.regex;\n    }\n\n    if (obj instanceof Error) {\n        return exports.error;\n    }\n\n    const objName = Object.prototype.toString.call(obj);\n    return internals.typeMap.get(objName) || exports.generic;\n};\n","\n\nconst internals = {};\n\n\nexports.keys = function (obj, options = {}) {\n\n    return options.symbols !== false ? Reflect.ownKeys(obj) : Object.getOwnPropertyNames(obj);  // Defaults to true\n};\n","\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Utils = require('./utils');\n\n\nconst internals = {};\n\n\nmodule.exports = internals.merge = function (target, source, options) {\n\n    Assert(target && typeof target === 'object', 'Invalid target value: must be an object');\n    Assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');\n\n    if (!source) {\n        return target;\n    }\n\n    options = Object.assign({ nullOverride: true, mergeArrays: true }, options);\n\n    if (Array.isArray(source)) {\n        Assert(Array.isArray(target), 'Cannot merge array onto an object');\n        if (!options.mergeArrays) {\n            target.length = 0;                                                          // Must not change target assignment\n        }\n\n        for (let i = 0; i < source.length; ++i) {\n            target.push(Clone(source[i], { symbols: options.symbols }));\n        }\n\n        return target;\n    }\n\n    const keys = Utils.keys(source, options);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key === '__proto__' ||\n            !Object.prototype.propertyIsEnumerable.call(source, key)) {\n\n            continue;\n        }\n\n        const value = source[key];\n        if (value &&\n            typeof value === 'object') {\n\n            if (target[key] === value) {\n                continue;                                           // Can occur for shallow merges\n            }\n\n            if (!target[key] ||\n                typeof target[key] !== 'object' ||\n                (Array.isArray(target[key]) !== Array.isArray(value)) ||\n                value instanceof Date ||\n                (Buffer && Buffer.isBuffer(value)) ||               // $lab:coverage:ignore$\n                value instanceof RegExp) {\n\n                target[key] = Clone(value, { symbols: options.symbols });\n            }\n            else {\n                internals.merge(target[key], value, options);\n            }\n        }\n        else {\n            if (value !== null &&\n                value !== undefined) {                              // Explicit to preserve empty strings\n\n                target[key] = value;\n            }\n            else if (options.nullOverride) {\n                target[key] = value;\n            }\n        }\n    }\n\n    return target;\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = internals.Bench = class {\n\n    constructor() {\n\n        this.ts = 0;\n        this.reset();\n    }\n\n    reset() {\n\n        this.ts = internals.Bench.now();\n    }\n\n    elapsed() {\n\n        return internals.Bench.now() - this.ts;\n    }\n\n    static now() {\n\n        const ts = process.hrtime();\n        return (ts[0] * 1e3) + (ts[1] / 1e6);\n    }\n};\n","\n\nconst Ignore = require('./ignore');\n\n\nconst internals = {};\n\n\nmodule.exports = function () {\n\n    return new Promise(Ignore);\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function () { };\n","\n\nconst Assert = require('./assert');\nconst DeepEqual = require('./deepEqual');\nconst EscapeRegex = require('./escapeRegex');\nconst Utils = require('./utils');\n\n\nconst internals = {};\n\n\nmodule.exports = function (ref, values, options = {}) {        // options: { deep, once, only, part, symbols }\n\n    /*\n        string -> string(s)\n        array -> item(s)\n        object -> key(s)\n        object -> object (key:value)\n    */\n\n    if (typeof values !== 'object') {\n        values = [values];\n    }\n\n    Assert(!Array.isArray(values) || values.length, 'Values array cannot be empty');\n\n    // String\n\n    if (typeof ref === 'string') {\n        return internals.string(ref, values, options);\n    }\n\n    // Array\n\n    if (Array.isArray(ref)) {\n        return internals.array(ref, values, options);\n    }\n\n    // Object\n\n    Assert(typeof ref === 'object', 'Reference must be string or an object');\n    return internals.object(ref, values, options);\n};\n\n\ninternals.array = function (ref, values, options) {\n\n    if (!Array.isArray(values)) {\n        values = [values];\n    }\n\n    if (!ref.length) {\n        return false;\n    }\n\n    if (options.only &&\n        options.once &&\n        ref.length !== values.length) {\n\n        return false;\n    }\n\n    let compare;\n\n    // Map values\n\n    const map = new Map();\n    for (const value of values) {\n        if (!options.deep ||\n            !value ||\n            typeof value !== 'object') {\n\n            const existing = map.get(value);\n            if (existing) {\n                ++existing.allowed;\n            }\n            else {\n                map.set(value, { allowed: 1, hits: 0 });\n            }\n        }\n        else {\n            compare = compare || internals.compare(options);\n\n            let found = false;\n            for (const [key, existing] of map.entries()) {\n                if (compare(key, value)) {\n                    ++existing.allowed;\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found) {\n                map.set(value, { allowed: 1, hits: 0 });\n            }\n        }\n    }\n\n    // Lookup values\n\n    let hits = 0;\n    for (const item of ref) {\n        let match;\n        if (!options.deep ||\n            !item ||\n            typeof item !== 'object') {\n\n            match = map.get(item);\n        }\n        else {\n            compare = compare || internals.compare(options);\n\n            for (const [key, existing] of map.entries()) {\n                if (compare(key, item)) {\n                    match = existing;\n                    break;\n                }\n            }\n        }\n\n        if (match) {\n            ++match.hits;\n            ++hits;\n\n            if (options.once &&\n                match.hits > match.allowed) {\n\n                return false;\n            }\n        }\n    }\n\n    // Validate results\n\n    if (options.only &&\n        hits !== ref.length) {\n\n        return false;\n    }\n\n    for (const match of map.values()) {\n        if (match.hits === match.allowed) {\n            continue;\n        }\n\n        if (match.hits < match.allowed &&\n            !options.part) {\n\n            return false;\n        }\n    }\n\n    return !!hits;\n};\n\n\ninternals.object = function (ref, values, options) {\n\n    Assert(options.once === undefined, 'Cannot use option once with object');\n\n    const keys = Utils.keys(ref, options);\n    if (!keys.length) {\n        return false;\n    }\n\n    // Keys list\n\n    if (Array.isArray(values)) {\n        return internals.array(keys, values, options);\n    }\n\n    // Key value pairs\n\n    const symbols = Object.getOwnPropertySymbols(values).filter((sym) => values.propertyIsEnumerable(sym));\n    const targets = [...Object.keys(values), ...symbols];\n\n    const compare = internals.compare(options);\n    const set = new Set(targets);\n\n    for (const key of keys) {\n        if (!set.has(key)) {\n            if (options.only) {\n                return false;\n            }\n\n            continue;\n        }\n\n        if (!compare(values[key], ref[key])) {\n            return false;\n        }\n\n        set.delete(key);\n    }\n\n    if (set.size) {\n        return options.part ? set.size < targets.length : false;\n    }\n\n    return true;\n};\n\n\ninternals.string = function (ref, values, options) {\n\n    // Empty string\n\n    if (ref === '') {\n        return values.length === 1 && values[0] === '' ||               // '' contains ''\n            !options.once && !values.some((v) => v !== '');             // '' contains multiple '' if !once\n    }\n\n    // Map values\n\n    const map = new Map();\n    const patterns = [];\n\n    for (const value of values) {\n        Assert(typeof value === 'string', 'Cannot compare string reference to non-string value');\n\n        if (value) {\n            const existing = map.get(value);\n            if (existing) {\n                ++existing.allowed;\n            }\n            else {\n                map.set(value, { allowed: 1, hits: 0 });\n                patterns.push(EscapeRegex(value));\n            }\n        }\n        else if (options.once ||\n            options.only) {\n\n            return false;\n        }\n    }\n\n    if (!patterns.length) {                     // Non-empty string contains unlimited empty string\n        return true;\n    }\n\n    // Match patterns\n\n    const regex = new RegExp(`(${patterns.join('|')})`, 'g');\n    const leftovers = ref.replace(regex, ($0, $1) => {\n\n        ++map.get($1).hits;\n        return '';                              // Remove from string\n    });\n\n    // Validate results\n\n    if (options.only &&\n        leftovers) {\n\n        return false;\n    }\n\n    let any = false;\n    for (const match of map.values()) {\n        if (match.hits) {\n            any = true;\n        }\n\n        if (match.hits === match.allowed) {\n            continue;\n        }\n\n        if (match.hits < match.allowed &&\n            !options.part) {\n\n            return false;\n        }\n\n        // match.hits > match.allowed\n\n        if (options.once) {\n            return false;\n        }\n    }\n\n    return !!any;\n};\n\n\ninternals.compare = function (options) {\n\n    if (!options.deep) {\n        return internals.shallow;\n    }\n\n    const hasOnly = options.only !== undefined;\n    const hasPart = options.part !== undefined;\n\n    const flags = {\n        prototype: hasOnly ? options.only : hasPart ? !options.part : false,\n        part: hasOnly ? !options.only : hasPart ? options.part : false\n    };\n\n    return (a, b) => DeepEqual(a, b, flags);\n};\n\n\ninternals.shallow = function (a, b) {\n\n    return a === b;\n};\n","\n\nconst Types = require('./types');\n\n\nconst internals = {\n    mismatched: null\n};\n\n\nmodule.exports = function (obj, ref, options) {\n\n    options = Object.assign({ prototype: true }, options);\n\n    return !!internals.isDeepEqual(obj, ref, options, []);\n};\n\n\ninternals.isDeepEqual = function (obj, ref, options, seen) {\n\n    if (obj === ref) {                                                      // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql\n        return obj !== 0 || 1 / obj === 1 / ref;\n    }\n\n    const type = typeof obj;\n\n    if (type !== typeof ref) {\n        return false;\n    }\n\n    if (obj === null ||\n        ref === null) {\n\n        return false;\n    }\n\n    if (type === 'function') {\n        if (!options.deepFunction ||\n            obj.toString() !== ref.toString()) {\n\n            return false;\n        }\n\n        // Continue as object\n    }\n    else if (type !== 'object') {\n        return obj !== obj && ref !== ref;                                  // NaN\n    }\n\n    const instanceType = internals.getSharedType(obj, ref, !!options.prototype);\n    switch (instanceType) {\n        case Types.buffer:\n            return Buffer && Buffer.prototype.equals.call(obj, ref);        // $lab:coverage:ignore$\n        case Types.promise:\n            return obj === ref;\n        case Types.regex:\n            return obj.toString() === ref.toString();\n        case internals.mismatched:\n            return false;\n    }\n\n    for (let i = seen.length - 1; i >= 0; --i) {\n        if (seen[i].isSame(obj, ref)) {\n            return true;                                                    // If previous comparison failed, it would have stopped execution\n        }\n    }\n\n    seen.push(new internals.SeenEntry(obj, ref));\n\n    try {\n        return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);\n    }\n    finally {\n        seen.pop();\n    }\n};\n\n\ninternals.getSharedType = function (obj, ref, checkPrototype) {\n\n    if (checkPrototype) {\n        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {\n            return internals.mismatched;\n        }\n\n        return Types.getInternalProto(obj);\n    }\n\n    const type = Types.getInternalProto(obj);\n    if (type !== Types.getInternalProto(ref)) {\n        return internals.mismatched;\n    }\n\n    return type;\n};\n\n\ninternals.valueOf = function (obj) {\n\n    const objValueOf = obj.valueOf;\n    if (objValueOf === undefined) {\n        return obj;\n    }\n\n    try {\n        return objValueOf.call(obj);\n    }\n    catch (err) {\n        return err;\n    }\n};\n\n\ninternals.hasOwnEnumerableProperty = function (obj, key) {\n\n    return Object.prototype.propertyIsEnumerable.call(obj, key);\n};\n\n\ninternals.isSetSimpleEqual = function (obj, ref) {\n\n    for (const entry of Set.prototype.values.call(obj)) {\n        if (!Set.prototype.has.call(ref, entry)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\ninternals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {\n\n    const { isDeepEqual, valueOf, hasOwnEnumerableProperty } = internals;\n    const { keys, getOwnPropertySymbols } = Object;\n\n    if (instanceType === Types.array) {\n        if (options.part) {\n\n            // Check if any index match any other index\n\n            for (const objValue of obj) {\n                for (const refValue of ref) {\n                    if (isDeepEqual(objValue, refValue, options, seen)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        else {\n            if (obj.length !== ref.length) {\n                return false;\n            }\n\n            for (let i = 0; i < obj.length; ++i) {\n                if (!isDeepEqual(obj[i], ref[i], options, seen)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n    else if (instanceType === Types.set) {\n        if (obj.size !== ref.size) {\n            return false;\n        }\n\n        if (!internals.isSetSimpleEqual(obj, ref)) {\n\n            // Check for deep equality\n\n            const ref2 = new Set(Set.prototype.values.call(ref));\n            for (const objEntry of Set.prototype.values.call(obj)) {\n                if (ref2.delete(objEntry)) {\n                    continue;\n                }\n\n                let found = false;\n                for (const refEntry of ref2) {\n                    if (isDeepEqual(objEntry, refEntry, options, seen)) {\n                        ref2.delete(refEntry);\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n    }\n    else if (instanceType === Types.map) {\n        if (obj.size !== ref.size) {\n            return false;\n        }\n\n        for (const [key, value] of Map.prototype.entries.call(obj)) {\n            if (value === undefined && !Map.prototype.has.call(ref, key)) {\n                return false;\n            }\n\n            if (!isDeepEqual(value, Map.prototype.get.call(ref, key), options, seen)) {\n                return false;\n            }\n        }\n    }\n    else if (instanceType === Types.error) {\n\n        // Always check name and message\n\n        if (obj.name !== ref.name ||\n            obj.message !== ref.message) {\n\n            return false;\n        }\n    }\n\n    // Check .valueOf()\n\n    const valueOfObj = valueOf(obj);\n    const valueOfRef = valueOf(ref);\n    if ((obj !== valueOfObj || ref !== valueOfRef) &&\n        !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {\n\n        return false;\n    }\n\n    // Check properties\n\n    const objKeys = keys(obj);\n    if (!options.part &&\n        objKeys.length !== keys(ref).length &&\n        !options.skip) {\n\n        return false;\n    }\n\n    let skipped = 0;\n    for (const key of objKeys) {\n        if (options.skip &&\n            options.skip.includes(key)) {\n\n            if (ref[key] === undefined) {\n                ++skipped;\n            }\n\n            continue;\n        }\n\n        if (!hasOwnEnumerableProperty(ref, key)) {\n            return false;\n        }\n\n        if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n            return false;\n        }\n    }\n\n    if (!options.part &&\n        objKeys.length - skipped !== keys(ref).length) {\n\n        return false;\n    }\n\n    // Check symbols\n\n    if (options.symbols !== false) {                                // Defaults to true\n        const objSymbols = getOwnPropertySymbols(obj);\n        const refSymbols = new Set(getOwnPropertySymbols(ref));\n\n        for (const key of objSymbols) {\n            if (!options.skip ||\n                !options.skip.includes(key)) {\n\n                if (hasOwnEnumerableProperty(obj, key)) {\n                    if (!hasOwnEnumerableProperty(ref, key)) {\n                        return false;\n                    }\n\n                    if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n                        return false;\n                    }\n                }\n                else if (hasOwnEnumerableProperty(ref, key)) {\n                    return false;\n                }\n            }\n\n            refSymbols.delete(key);\n        }\n\n        for (const key of refSymbols) {\n            if (hasOwnEnumerableProperty(ref, key)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\n\ninternals.SeenEntry = class {\n\n    constructor(obj, ref) {\n\n        this.obj = obj;\n        this.ref = ref;\n    }\n\n    isSame(obj, ref) {\n\n        return this.obj === obj && this.ref === ref;\n    }\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function (string) {\n\n    // Escape ^$.*+-?=!:|\\/()[]{},\n\n    return string.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g, '\\\\$&');\n};\n","\n\nconst Assert = require('./assert');\n\n\nconst internals = {};\n\n\nmodule.exports = function (attribute) {\n\n    // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \\, \"\n\n    Assert(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~\\\"\\\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');\n\n    return attribute.replace(/\\\\/g, '\\\\\\\\').replace(/\\\"/g, '\\\\\"');                             // Escape quotes and slash\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function (input) {\n\n    if (!input) {\n        return '';\n    }\n\n    let escaped = '';\n\n    for (let i = 0; i < input.length; ++i) {\n\n        const charCode = input.charCodeAt(i);\n\n        if (internals.isSafe(charCode)) {\n            escaped += input[i];\n        }\n        else {\n            escaped += internals.escapeHtmlChar(charCode);\n        }\n    }\n\n    return escaped;\n};\n\n\ninternals.escapeHtmlChar = function (charCode) {\n\n    const namedEscape = internals.namedHtml.get(charCode);\n    if (namedEscape) {\n        return namedEscape;\n    }\n\n    if (charCode >= 256) {\n        return '&#' + charCode + ';';\n    }\n\n    const hexValue = charCode.toString(16).padStart(2, '0');\n    return `&#x${hexValue};`;\n};\n\n\ninternals.isSafe = function (charCode) {\n\n    return internals.safeCharCodes.has(charCode);\n};\n\n\ninternals.namedHtml = new Map([\n    [38, '&amp;'],\n    [60, '&lt;'],\n    [62, '&gt;'],\n    [34, '&quot;'],\n    [160, '&nbsp;'],\n    [162, '&cent;'],\n    [163, '&pound;'],\n    [164, '&curren;'],\n    [169, '&copy;'],\n    [174, '&reg;']\n]);\n\n\ninternals.safeCharCodes = (function () {\n\n    const safe = new Set();\n\n    for (let i = 32; i < 123; ++i) {\n\n        if ((i >= 97) ||                    // a-z\n            (i >= 65 && i <= 90) ||         // A-Z\n            (i >= 48 && i <= 57) ||         // 0-9\n            i === 32 ||                     // space\n            i === 46 ||                     // .\n            i === 44 ||                     // ,\n            i === 45 ||                     // -\n            i === 58 ||                     // :\n            i === 95) {                     // _\n\n            safe.add(i);\n        }\n    }\n\n    return safe;\n}());\n","\n\nconst internals = {};\n\n\nmodule.exports = function (input) {\n\n    if (!input) {\n        return '';\n    }\n\n    return input.replace(/[<>&\\u2028\\u2029]/g, internals.escape);\n};\n\n\ninternals.escape = function (char) {\n\n    return internals.replacements.get(char);\n};\n\n\ninternals.replacements = new Map([\n    ['<', '\\\\u003c'],\n    ['>', '\\\\u003e'],\n    ['&', '\\\\u0026'],\n    ['\\u2028', '\\\\u2028'],\n    ['\\u2029', '\\\\u2029']\n]);\n","\n\nconst internals = {};\n\n\nmodule.exports = internals.flatten = function (array, target) {\n\n    const result = target || [];\n\n    for (const entry of array) {\n        if (Array.isArray(entry)) {\n            internals.flatten(entry, result);\n        }\n        else {\n            result.push(entry);\n        }\n    }\n\n    return result;\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function (array1, array2, options = {}) {\n\n    if (!array1 ||\n        !array2) {\n\n        return (options.first ? null : []);\n    }\n\n    const common = [];\n    const hash = (Array.isArray(array1) ? new Set(array1) : array1);\n    const found = new Set();\n    for (const value of array2) {\n        if (internals.has(hash, value) &&\n            !found.has(value)) {\n\n            if (options.first) {\n                return value;\n            }\n\n            common.push(value);\n            found.add(value);\n        }\n    }\n\n    return (options.first ? null : common);\n};\n\n\ninternals.has = function (ref, key) {\n\n    if (typeof ref.has === 'function') {\n        return ref.has(key);\n    }\n\n    return ref[key] !== undefined;\n};\n","\n\nconst internals = {};\n\n\nmodule.exports = function (promise) {\n\n    return !!promise && typeof promise.then === 'function';\n};\n","\n\nconst internals = {\n    wrapped: Symbol('wrapped')\n};\n\n\nmodule.exports = function (method) {\n\n    if (method[internals.wrapped]) {\n        return method;\n    }\n\n    let once = false;\n    const wrappedFn = function (...args) {\n\n        if (!once) {\n            once = true;\n            method(...args);\n        }\n    };\n\n    wrappedFn[internals.wrapped] = true;\n    return wrappedFn;\n};\n","\n\nconst Reach = require('./reach');\n\n\nconst internals = {};\n\n\nmodule.exports = function (obj, template, options) {\n\n    return template.replace(/{([^{}]+)}/g, ($0, chain) => {\n\n        const value = Reach(obj, chain, options);\n        return (value === undefined || value === null ? '' : value);\n    });\n};\n","\n\nconst internals = {\n    maxTimer: 2 ** 31 - 1              // ~25 days\n};\n\n\nmodule.exports = function (timeout, returnValue, options) {\n\n    if (typeof timeout === 'bigint') {\n        timeout = Number(timeout);\n    }\n\n    if (timeout >= Number.MAX_SAFE_INTEGER) {         // Thousands of years\n        timeout = Infinity;\n    }\n\n    if (typeof timeout !== 'number' && timeout !== undefined) {\n        throw new TypeError('Timeout must be a number or bigint');\n    }\n\n    return new Promise((resolve) => {\n\n        const _setTimeout = options ? options.setTimeout : setTimeout;\n\n        const activate = () => {\n\n            const time = Math.min(timeout, internals.maxTimer);\n            timeout -= time;\n            _setTimeout(() => (timeout > 0 ? activate() : resolve(returnValue)), time);\n        };\n\n        if (timeout !== Infinity) {\n            activate();\n        }\n    });\n};\n"]}